---
import Button from "../components/Button.astro";
---

<div class="container">
  <Button id="notifyButton" width="fit-content">Recevoir une notif</Button>
  <Button id="unsubscribeButton" style="display: none" width="fit-content">
    Annuler la notif
  </Button>
  <span class="info">
    ?
    <div class="info-tooltip">
      <p>
        Cliquez sur le bouton "Recevoir une notif" pour activer les
        notifications push.
      </p>
      <p>Vous recevrez une notification de rappel avant la soirée</p>
      <p>
        Vous pouvez annuler à tout moment en cliquant sur "Annuler la notif".
      </p>
    </div>
  </span>
</div>

<style>
  .container {
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
  }

  .info {
    position: absolute;
    top: 0;
    bottom: 0;
    left: calc(100% + 0.75em);
    right: 6px;
    margin: auto;
    font-size: 0.8em;
    cursor: help;
    aspect-ratio: 1;
    width: 1em;
    height: 1em;
    font-weight: bold;
    text-align: center;
    border-radius: 50%;
    line-height: 1em;
    padding: 0.5em;
    border: 3px solid var(--color-primary);
    color: var(--color-primary);
  }

  .info-tooltip {
    position: absolute;
    display: block;
    pointer-events: none;
    top: -1em;
    left: 2em;
    margin: auto;
    padding: 1em;
    border: 3px solid var(--color-primary);
    background: rgba(var(--color-background-rgb), 0.1);
    border-radius: 0.5em;
    width: min(18em, 90vw);
    box-sizing: border-box;
    backdrop-filter: blur(10px);
    opacity: 0;
    z-index: 10;
    text-align: left;
    transform: translateY(100%) translateX(-100%);

    transition:
      opacity 0.5s ease-out,
      transform 0.5s ease-out;
  }

  .info:hover .info-tooltip,
  .info:active .info-tooltip,
  .info:focus .info-tooltip,
  .info-tooltip:hover {
    transform: translateY(-105%) translateX(-100%);
    opacity: 1;
  }
</style>

<script>
  const API_URL = "https://api.hydra2025.fr/event";

  const notifyButton = document.getElementById(
    "notifyButton"
  ) as HTMLDivElement;
  const unsubscribeButton = document.getElementById(
    "unsubscribeButton"
  ) as HTMLDivElement;

  // Initialize push notifications
  async function initializePushNotifications(
    registration: ServiceWorkerRegistration
  ) {
    try {
      const subscription = await registration.pushManager.getSubscription();
      if (subscription) {
        notifyButton.style.display = "none";
        unsubscribeButton.style.display = "block";
      } else {
        notifyButton.style.display = "block";
        unsubscribeButton.style.display = "none";
      }
    } catch (err) {
      console.log("Error during push notifications initialization:", err);
    }
  }

  // Subscribe to push notifications
  async function subscribeToPushNotifications() {
    try {
      notifyButton.style.display = "none";
      const registration = await navigator.serviceWorker.ready;
      const subscription = await registration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: urlBase64ToUint8Array(
          "BEgMUzvptGjywH27n77_B6_96V_iE8oJ-l_1uxQaBe1A1iAQ5Zren5iAYDvqHYT3QLMOuAM8qug45k_AQ98Bi9Q"
        ),
      });
      await sendSubscriptionToServer({
        subscribe: true,
        ...subscription.toJSON(),
      });
      unsubscribeButton.style.display = "block";
    } catch (err) {
      console.log("Failed to subscribe to notifications:", err);
      notifyButton.style.display = "block";
    }
  }

  // Unsubscribe from push notifications
  async function unsubscribeFromPushNotifications() {
    try {
      const registration = await navigator.serviceWorker.ready;
      const subscription = await registration.pushManager.getSubscription();
      if (subscription) {
        await sendSubscriptionToServer({
          unsubscribe: true,
          ...subscription.toJSON(),
        });
        await subscription.unsubscribe();
        notifyButton.style.display = "block";
        unsubscribeButton.style.display = "none";
      }
    } catch (err) {
      console.log("Error unsubscribing:", err);
      unsubscribeButton.style.display = "block";
    }
  }

  // Send subscription details to the server
  async function sendSubscriptionToServer(subscription: any) {
    const response = await fetch(`${API_URL}/save-subscription`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(subscription),
    });
    if (!response.ok) throw new Error("Failed to send subscription to server");
  }

  // Convert base64 URL to Uint8Array
  function urlBase64ToUint8Array(base64String: string) {
    const padding = "=".repeat((4 - (base64String.length % 4)) % 4);
    const base64 = (base64String + padding)
      .replace(/-/g, "+")
      .replace(/_/g, "/");
    const rawData = window.atob(base64);
    const outputArray = new Uint8Array(rawData.length);
    for (let i = 0; i < rawData.length; i++) {
      outputArray[i] = rawData.charCodeAt(i);
    }
    return outputArray;
  }

  notifyButton.addEventListener("click", async () => {
    if (Notification.permission === "granted") {
      const registration = await navigator.serviceWorker.ready;
      const subscription = await registration.pushManager.getSubscription();
      if (subscription) {
        await unsubscribeFromPushNotifications();
      } else {
        await subscribeToPushNotifications();
      }
    } else {
      const permission = await Notification.requestPermission();
      if (permission === "granted") await subscribeToPushNotifications();
    }
  });

  unsubscribeButton.addEventListener("click", unsubscribeFromPushNotifications);

  // Register service worker and initialize
  if ("serviceWorker" in navigator && "PushManager" in window) {
    navigator.serviceWorker
      .register("/sw.js")
      .then((registration) => {
        initializePushNotifications(registration);
      })
      .catch((err) => {
        console.log("Service Worker registration failed:", err);
      });
  } else {
    console.log("Push notifications are not supported");
    notifyButton.style.display = "none";
  }
</script>
