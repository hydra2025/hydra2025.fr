---
interface Props extends astroHTML.JSX.InputHTMLAttributes {
  label?: string;
  style?: string;
  infotext?: string;
}

const props = Astro.props;
const inputProps = Object.fromEntries(
  Object.entries(props).filter(
    ([key]) => !["label", "style", "infotext"].includes(key)
  )
);
---

<div class="container" style={props.style}>
  {props.label && <label for={props.id}>{props.label}</label>}
  <div class="border-box">
    <div class="border"></div>
    <input {...inputProps} />
  </div>
  {props.infotext && <small>{props.infotext}</small>}
</div>
<style>
  input {
    background-color: transparent;
    color: var(--color-primary);
    font-family: var(--font-family-text);
    transition: box-shadow 0.3s ease-out;
    box-shadow: 0 0 20px transparent;
    border: 0;
    outline: none;
    padding: 0;
    vertical-align: baseline;
    font-size: 1em;
    width: 100%;
    min-width: 0;
  }

  input:focus {
    outline: none;
  }
  input:focus + .border {
    box-shadow: 0 0 20px var(--color-primary);
  }
  input::placeholder {
    color: rgba(var(--color-primary-rgb), 0.5);
  }

  label {
    font-family: var(--font-family-text);
    font-size: 1em;
    padding: 0;
    margin: 0;
    width: 100%;
    text-align: right;
    font-weight: bold;
  }

  .container {
    display: grid;
    grid-template-columns: var(--petit-dej-col) 1fr;
    justify-content: center;
    align-items: center;
    gap: 0.25em;
    width: 100%;
    box-sizing: border-box;
    padding: 0em;
  }
  .border-box {
    padding: 0.5em;
    position: relative;
    clip-path: polygon(
      0% 0%,
      0% 100%,
      100% 100%,
      100% 15px,
      calc(100% - 15px) 0%,
      0% 0%
    );
  }
  .border {
    position: absolute;
    inset: 0;
    background-color: var(--color-primary);
    clip-path: polygon(
      0% 0%,
      0% 100%,
      100% 100%,
      100% 15px,
      calc(100% - 15px) 0%,
      0% 0%,
      3px 3px,
      calc(calc(100% - 3px) - calc(15px - calc(3px * 0.7071067811865475))) 3px,
      calc(100% - 3px) calc(3px + calc(15px - calc(3px * 0.7071067811865475))),
      calc(100% - 3px) calc(100% - 3px),
      3px calc(100% - 3px),
      3px 3px
    );
  }
  small {
    font-size: 0.8em;
    color: var(--color-primary);
    text-align: left;
    margin: 0;
    padding: 0;
    grid-column: 2;
    margin-bottom: 0.5em;
  }

  @media screen and (max-width: 768px) {
    .container {
      grid-template-columns: 1fr;
    }

    input {
      width: 100%;
    }
    label {
      width: 100%;
      text-align: left;
    }
    small {
      grid-column: span 1;
    }
  }
</style>
