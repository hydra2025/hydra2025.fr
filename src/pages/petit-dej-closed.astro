---
import LocationSelect from "../components/petit-dej/LocationSelect.vue";
import SelectBoxVue from "../components/petit-dej/SelectBox.vue";
import TextBox from "../components/petit-dej/TextBox.astro";
import Separator from "../layouts/boxes/Separator.astro";
import Layout from "../layouts/Layout.astro";
import Button from "../components/Button.astro";
import MenuSelect from "../components/petit-dej/MenuSelect.astro";
---

<Layout title="Petit Déjeuner">
  <div id="container">
    <h2>Petits Déjeuners</h2>
    <p>
      Sur cette page, vous pouvez commander un "petit déjeuner" qui vous sera
      livré à domicile où que vous vous trouviez sur le campus ou dans Évry.
    </p>
    <form id="breakfast-form">
      <h3>Menus</h3>

      <MenuSelect />
      <TextBox
        placeholder="Envoyez votre livreur le plus sexy"
        label="Commentaire:"
        name="info"
        infotext="Indiquez ici toute information supplémentaire que vous souhaitez communiquer à notre équipe de BG (ou une tradition que vous souhaiteriez respecter)."
      />

      <SelectBoxVue
        required
        client:visible
        id="horaire"
        label="Créneau horaire:"
        name="horaire"
        options={[
          { value: 8, label: "8h" },
          { value: 9, label: "9h" },
          { value: 10, label: "10h" },
          { value: 11, label: "11h" },
          { value: 12, label: "12h" },
          { value: 13, label: "13h" },
          { value: 14, label: "14h" },
          { value: 15, label: "15h" },
          { value: 16, label: "16h" },
          { value: 17, label: "17h" },
          { value: 18, label: "18h" },
        ]}
        default="10"
        style=""
        infotext=""
      />
      <Separator width="100%" />
      <h3>Informations</h3>
      <TextBox
        placeholder="John"
        type="text"
        label="Prénom:"
        name="firstname"
        required
        aria-required="true"
      />
      <TextBox
        placeholder="Doe"
        type="text"
        label="Nom:"
        name="lastname"
        required
        aria-required="true"
      />

      <TextBox
        placeholder="john.doe@telecom-sudparis.eu"
        type="email"
        label="Email:"
        name="email"
        required
        aria-required="true"
        pattern="^[a-zA-Z0-9._%+\\-]+@(telecom-sudparis|imt-bs)\\.eu$"
        infotext="Veuillez utiliser votre adresse email de l'école (forme prenom.nom@telecom-sudparis.eu ou prenom.nom@imt-bs.eu)"
      />

      <TextBox
        placeholder="+33 6 12 34 56 78"
        type="tel"
        label="Téléphone:"
        name="phone"
        pattern="^\\+?\\d[\\d\\s]{9,16}$"
        required
        aria-required="true"
      />
      <Separator width="100%" />

      <Separator width="100%" />
      <h3>Lieu de livraison</h3>
      <LocationSelect client:visible />
      <p id="legal">
        En cliquant sur "Commander", vous acceptez que les données renseignées
        ci-dessus soient traitées dans le cadre de l'Opération Petit Déj de la
        liste BDE Hydra 2025. Si vous souhaitez corriger ou supprimer des
        données vous concernant, contactez Alexis Rossfelder.
      </p>
      <Button id="submit-form-visible">Commander</Button>
      <input type="submit" style="display: none;" id="submit-form" />
    </form>
  </div>
</Layout>

<script>
  const ENDPOINT = "https://api.hydra2025.fr/pdj/order";
  //const ENDPOINT = "http://localhost:8000/order";
  type RequestError = {
    type: string;
    loc: [string, string];
    msg: string;
    input: string;
    ctx: object;
  };

  const error_messages: { [key: string]: string } = {
    string_too_short: "Ce champ est trop court.",
    string_too_long: "Ce champ est trop long.",
    string_pattern_mismatch: "Ce champ ne respecte pas le format attendu.",
    greater_than_equal:
      "La valeur n'est pas valide, veuillez sélectionner un élément du menu déroulant (et ne pas modifier le code HTML)",
    less_than_equal:
      "La valeur n'est pas valide, veuillez sélectionner un élément du menu déroulant (et ne pas modifier le code HTML)",
  };

  // Remove error messages when the user types in the field
  document.addEventListener("input", (event) => {
    const target = event.target as HTMLInputElement;
    if (!target.parentElement) return;
    const errorMessages =
      target.parentElement.querySelectorAll(".error-message");
    errorMessages.forEach((el) => el.remove());
  });

  function handleSubmit(event: Event) {
    event.preventDefault();
    const form = event.target as HTMLFormElement;
    const formData = new FormData(form);
    const payload = Object.fromEntries(formData.entries());

    form.querySelectorAll(".error-message").forEach((el) => el.remove());

    // Reset any previous code
    sessionStorage.removeItem("code");
    localStorage.removeItem("code");
    document.cookie =
      "code=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; SameSite=Strict";

    console.log(payload);
    fetch(ENDPOINT, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.detail) {
          data.detail.forEach((error: RequestError) => {
            const field = form.querySelector(`[name="${error.loc[1]}"]`);
            if (field) {
              const errorMessage = document.createElement("div");
              errorMessage.style.color = "red";
              errorMessage.classList.add("error-message");
              errorMessage.textContent =
                error_messages[error.type] || error.msg;

              if (field.parentElement) {
                field.parentElement.appendChild(errorMessage);
                // Scroll to the first error message
                field.parentElement.scrollIntoView({
                  behavior: "smooth",
                  block: "center",
                });
              }
            } else {
              const message = error_messages[error.type] || error.msg;
              // Remove "ValueError:"
              alert(message.replace("Value error, ", ""));
            }
          });
        } else {
          console.log(data);
          const code = data.code;
          if (code == "CLOSED") {
            alert("Les commandes sont fermées pour le moment.");
            return;
          }
          sessionStorage.setItem("code", code);
          sessionStorage.setItem("menu", JSON.stringify(payload));
          localStorage.setItem("code", code);
          localStorage.setItem("menu", JSON.stringify(payload));
          document.cookie = `code=${code}; expires=Fri, 31 Dec 9999 23:59:59 GMT; SameSite=Strict; path=/`;
          window.location.href = "/petit-dej-paiement";
        }
      })
      .catch((error) => {
        console.error("Error:", error);
        alert("Une erreur est survenue lors de la commande.");
      });
  }
  document.addEventListener("astro:page-load", () => {
    const form = document.getElementById("breakfast-form") as HTMLFormElement;
    const submitButton = document.getElementById(
      "submit-form"
    ) as HTMLButtonElement;
    const submitButtonVisible = document.getElementById(
      "submit-form-visible"
    ) as HTMLButtonElement;
    if (submitButtonVisible)
      submitButtonVisible.addEventListener("click", () => {
        if (submitButton) submitButton.click();
      });

    if (form) form.addEventListener("submit", handleSubmit);

    if (localStorage.getItem("code") || sessionStorage.getItem("code")) {
      alert(
        "Vous avez déjà une commande en cours. Vous allez être redirigé vers la page de paiement. Pour modifier votre commande, contactez Alexis Rossfelder sur Messenger."
      );
      window.location.href = "/petit-dej-paiement";
    }
  });
</script>

<style>
  :root {
    --petit-dej-col: 13ch;
  }
</style>

<style>
  #container {
    display: flex;
    flex-direction: column;
    gap: 1em;
    margin: 0 auto;
    max-width: 30em;
    font-size: 1.2em;
    width: calc(100% - 2em);
  }

  .col-1 {
    grid-column: span 1;
  }
  .col-2 {
    grid-column: span 2;
  }
  h2 {
    text-align: center;
    margin-bottom: 0;
  }
  h3 {
    text-align: center;
    margin-bottom: 0.25em;
    margin-top: 0;
  }
  p {
    width: 100%;
  }
  form {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1em;
    width: 100%;
  }

  #legal {
    font-size: 0.8em;
    color: var(--color-primary);
    text-align: justify;
    margin: 1.5em 0 0 0;
    padding: 0;
  }
</style>
